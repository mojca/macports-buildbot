# -*- python -*-
# ex: set filetype=python:

import os
import re
import yaml

from datetime import timedelta
try:
   from yaml import CLoader as Loader
except ImportError:
   from yaml import Loader

from buildbot.plugins import (util, changes, steps, schedulers, worker, reporters)

from utilities import *


c = BuildmasterConfig = {}

c['configurators'] = [
    util.JanitorConfigurator(
        logHorizon = timedelta(weeks = 4),
        hour       = 12,
        dayOfWeek  = 6,
    )
]

c['caches'] = {
    'Changes':      1000,
    'Builds':       5000,
    'chdicts':       100,
    'BuildRequests':  10,
    'SourceStamps':   20,
    'ssdicts':        20,
    'objectids':      10,
    'usdicts':       100,
}

c['collapseRequests'] = True # TODO: it used to be False

# READ CONFIGURATION

#try:
with open('config/config.yml') as f:
    yamlconfig = yaml.load(f, Loader=Loader)
#except IOError:
#    ...
config      = yamlconfig['config']
workerlist  = yamlconfig['workers']
builderdata = yamlconfig['builders']

# BASIC SETUP

path_base    = '/usr/bin:/bin:/usr/sbin:/sbin'
path_ports   = os.path.join(config['paths']['tools'], 'bin') + ':' + path_base
path_watcher = os.path.join(config['paths']['jobsprefix'], 'bin') + ':' + path_base

c['workers'] = [worker.Worker(name, pwd) for name, pwd in workerlist.items()]

c['protocols'] = {'pb': {'port': config['info']['workerport']}}

c['change_source'] = [
    changes.GitPoller(
        config['urls']['ports'],
        workdir      = 'gitpoller-workdir',
        branch       = 'master',
        pollInterval = 10,
        pollAtLaunch = True,
    )
]

portwatcher_buildernames = ['portwatcher']
portbuilder_buildernames = []
for builder in builderdata['ports']:
    portbuilder_buildernames.append(builder['name'])

#port_platforms = [
#    plat for plat in build_platforms
#    if 'linux' not in plat and '10_5_ppc' != plat]
#
#portwatcher_buildernames = list(map('ports_{}_watcher'.format, port_platforms))
#portbuilder_buildernames = list(map('ports_{}_builder'.format, port_platforms))
#portbuilder_triggerables = list(map('ports_{}_trigger'.format, port_platforms))

c['schedulers'] = [
    schedulers.ForceScheduler(
        name = 'portwatcher_force',
        builderNames = portwatcher_buildernames,
        properties = [
            util.ChoiceStringParameter(
                name     = 'os',
                label    = 'OS versions:',
                multiple = True,
                choices  = portbuilder_buildernames,
                default  = portbuilder_buildernames,
            ),
            util.StringParameter(
                name     = 'portlist',
                label    = 'Port list:',
                default  = '',
                required = False,
            ),
            util.StringParameter(
                name     = 'portexpression',
                label    = 'Port expression:',
                default  = '',
                required = False,
            ),
            util.BooleanParameter(
                name     = 'fakebuild',
                label    = 'Fake a build:',
                default  = False,
            ),
        ]),
#    schedulers.SingleBranchScheduler(
#        name='ports',
#        treeStableTimer=5,
#        change_filter=util.ChangeFilter(
#            branch='master',
#            filter_fn=lambda change: any(port_from_path(f)
#                                         for f in change.files)
#        ),
#        builderNames=portwatcher_buildernames)
]

#portbuilders = zip(portbuilder_triggerables, portbuilder_buildernames)
#c['schedulers'].extend(schedulers.Triggerable(name=t, builderNames=[b])
#                       for t, b in portbuilders)
#

class TriggerWithPortlist(steps.Trigger):
    def __init__(self, *args, **kwargs):
        super(TriggerWithPortlist, self).__init__(*args, **kwargs)

    def getSchedulersAndProperties(self):
        sp = []
        priority = 1
        for scheduler in self.schedulerNames:
            for port in self.build.getProperty('portlist').split():
                props = self.set_properties.copy()
                props['virtual_builder_name'] = port + \
                    '_' + self.set_properties.get('platform')
                props['virtual_builder_tags'] = [
                    port, self.set_properties.get('platform')]
                props['portname'] = port
                props['priority'] = priority
                priority += 1
                sp.append([scheduler, props])
        return sp

class SetPropertyFromCommandWithPortlist(steps.SetPropertyFromCommand):
    def setBuild(self, build):
        super(SetPropertyFromCommandWithPortlist, self).setBuild(build)

        ports = set(self.getProperty('portlist', default='').split())
        ports.update(filter(None, map(port_from_path, self.build.allFiles())))

        self.setProperty('portlist', ' '.join(ports))

@util.renderer
def portCommand(props):
    command = ['port', 'info', '--index', '--line', '--name']
    pl = props.getProperty('portlist')
    pe = props.getProperty('portexpression')

    if pl != '' and pl != [''] and pl != None:
        pl = pl.split(' ')
        command.extend([pl])
    elif pe != '' and pe != [''] and pe != None:
        pe = pe.split(' ')
        command.extend([pe])
    return command

portwatcher_factory = util.BuildFactory()
portwatcher_factory.useProgress = False
portwatcher_factory.workdir     = 'build'
portwatcher_factory.addStep(SetPropertyFromCommandWithPortlist(
    command         = portCommand,
    property        = 'portlist',
    description     = 'settingportlist',
    descriptionDone = 'portlistset'
))
#portwatcher_factory.addStep(TriggerWithPortlist(
#    name              = 'portbuilders',
#    schedulerNames    = [triggerable],
#    set_properties    = {'platform': os_version},
#    waitForFinish     = True,
#    updateSourceStamp = True
#))

portbuilder_factory = util.BuildFactory()
portbuilder_factory.useProgress = False
portbuilder_factory.workdir     = 'build'
portbuilder_factory.addStep(steps.SetPropertyFromCommand(
    command  = ['port', 'info', '--version',
                '--line', util.Interpolate('%(prop:portname)s')],
    property = 'version'
))
portbuilder_factory.addStep(steps.FileDownload(
    mastersrc  = './rands.py',
    workerdest = 'rands.py',
))
portbuilder_factory.addStep(steps.ShellCommand(
    command = ['python', 'rands.py'],
))
#logdir = os.path.join(portbuilder_factory.workdir, 'logs')

#portsworkers = {}
#baseworkers = {}
#workernames = workerdata['workers'].keys()
#for plat in build_platforms:
#    baseworkers[plat] = filter(
#        lambda x: x.endswith(plat + '_base'), workernames)
#    portsworkers[plat] = filter(
#        lambda x: x.endswith(plat + '_ports'), workernames)

env_buildinfo = {
    'BUILDBOT_BUILDERNAME': util.Interpolate('%(kw:buildername)s'),
    'BUILDBOT_BUILDNUMBER': util.Interpolate('%(kw:buildnumber)s')
}

c['builders'] = []
c['builders'].extend((
    util.BuilderConfig(
       name = 'portwatcher',
       workernames = [builderdata['watcher']['worker']],
       factory = portwatcher_factory, # TODO
       tags = ['ports', 'portwatcher'],
       env = merge_dicts(env_buildinfo, {'PATH': path_watcher}),
    ),
))
#for builder in builderdata['ports']:
#    c['builders'].extend((
#        util.BuilderConfig(
#            name = builder['name'],
#            workernames = [builder['worker']],
#            factory = portbuilder_factory,
#            tags = ['ports', builder['os']],
#            #nextBuild = getNextBuildOnPortBuilder,
#            env = merge_dicts(env_buildinfo, {'PATH': path_ports})
#        ),
#    ))

# TODO
#if 'statusPushUrl' in config:
#    sp = reporters.HttpStatusPush(serverUrl=config['statusPushUrl'])
#    c['services'] = [sp]

c['title'] = config['info']['title']
c['titleURL'] = config['info']['titleURL']
c['buildbotURL'] = config['info']['buildbotURL']

c['www'] = dict(
    port = config['info']['httpport'],
    plugins = dict(
        waterfall_view = {},
        console_view = {},
        grid_view = {},
        buildbot_macports_custom_views = {},
    ),
)

c['www']['ui_default_config'] = {
    'BuildbotMacPortsCustomViews.changeLimit': 500,
}

c['db'] = {
    'db_url': config['database']['db_url'],
}

c['buildbotNetUsageData'] = 'basic' # or None
